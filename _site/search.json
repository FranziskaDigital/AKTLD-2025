[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This site is under construction. It will be finished at the time of the AKTLD 2025 conference in Cottbus."
  },
  {
    "objectID": "dashboard.html",
    "href": "dashboard.html",
    "title": "UNESCO Welterbestätten",
    "section": "",
    "text": "Code\nimport pandas as pd\nimport plotly.express as px\n\n# Daten laden und vorbereiten\nCSV_PATH = \"World-Heritage-2025.csv\"\ndf = pd.read_csv(CSV_PATH)\n\n# Spalten säubern / Typen anpassen\ndf[\"date_inscribed\"] = pd.to_numeric(df[\"date_inscribed\"], errors=\"coerce\").astype(\"Int64\")\ndf = df.dropna(subset=[\"name_en\", \"date_inscribed\", \"category\", \"latitude\", \"longitude\"]).reset_index(drop=True)\n\n# Farben für die einzelnen Kategorien festlegen\npalette = px.colors.qualitative.Plotly\nunique_cats = sorted(df[\"category\"].unique())\ncolor_map = {cat: palette[i % len(palette)] for i, cat in enumerate(unique_cats)}\ndf[\"color\"] = df[\"category\"].map(color_map)\n\n# Erstelle die Weltkarte\nfig = px.scatter_geo(\n    df,\n    lat=\"latitude\",\n    lon=\"longitude\",\n    hover_name=\"name_en\",\n    color=\"category\",\n    color_discrete_map=color_map,\n    projection=\"natural earth\",\n    title=\"UNESCO-Welterbestätten\",\n)\n\n# Anpassungen für die Karte\nfig.update_layout(\n    width=700,\n    height=400,\n    geo=dict(\n        showland=True,\n        landcolor=\"lightgray\",\n        countrycolor=\"gray\",\n        showframe=False,\n        showcoastlines=True,\n        coastlinecolor=\"gray\",\n        projection=dict(\n            type=\"equal earth\"\n        ),\n        center=dict(\n            lat=0,\n            lon=0\n        ),\n        lonaxis=dict(\n            showgrid=True,\n            gridwidth=0.5,\n            gridcolor=\"lightgray\"\n        ),\n        lataxis=dict(\n            showgrid=True,\n            gridwidth=0.5,\n            gridcolor=\"lightgray\"\n        )\n    )\n)\n\n# Zeige die Karte an \nfig.show()"
  },
  {
    "objectID": "dashboard.html#interaktive-karte",
    "href": "dashboard.html#interaktive-karte",
    "title": "UNESCO Welterbestätten",
    "section": "Interaktive Karte",
    "text": "Interaktive Karte\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\n\n# Daten laden\nCSV_PATH = \"World-Heritage-2025.csv\"\ndf = pd.read_csv(CSV_PATH)\n\n# Spalten bereinigen\ndf[\"date_inscribed\"] = pd.to_numeric(df[\"date_inscribed\"], errors=\"coerce\").astype(\"Int64\")\ndf = df.dropna(subset=[\"name_en\", \"date_inscribed\", \"category\", \"latitude\", \"longitude\"]).reset_index(drop=True)\n\n# Sortieren für richtigen Slider\ndf = df.sort_values(\"date_inscribed\")\ndf[\"date_inscribed\"] = df[\"date_inscribed\"].astype(int).astype(str)\n\n# Farben\npalette = px.colors.qualitative.Plotly\nunique_cats = sorted(df[\"category\"].unique())\ncolor_map = {cat: palette[i % len(palette)] for i, cat in enumerate(unique_cats)}\n\n# Plot erstellen\nfig = px.scatter_geo(\n    df,\n    lat=\"latitude\",\n    lon=\"longitude\",\n    hover_name=\"name_en\",\n    color=\"category\",\n    color_discrete_map=color_map,\n    projection=\"natural earth\",\n    animation_frame=\"date_inscribed\",\n    title=\"UNESCO-Welterbestätten mit Timeslider\",\n)\n\nfig.update_layout(\n    width=900,\n    height=500,\n    geo=dict(\n        showland=True,\n        landcolor=\"lightgray\",\n        countrycolor=\"gray\",\n        showframe=False,\n        showcoastlines=True,\n        coastlinecolor=\"gray\",\n        projection=dict(type=\"equal earth\"),\n        center=dict(lat=0, lon=0),\n        lonaxis=dict(showgrid=True, gridwidth=0.5, gridcolor=\"lightgray\"),\n        lataxis=dict(showgrid=True, gridwidth=0.5, gridcolor=\"lightgray\")\n    )\n)\n\nfig.update_layout(\n    sliders=[dict(currentvalue={\"prefix\": \"Jahr: \"})]\n)\n\n\nfig"
  },
  {
    "objectID": "dashboard.html#kumulierte-visualisierung",
    "href": "dashboard.html#kumulierte-visualisierung",
    "title": "UNESCO Welterbestätten",
    "section": "Kumulierte Visualisierung",
    "text": "Kumulierte Visualisierung\n\n\nCode\nimport pandas as pd\nimport plotly.express as px\nimport plotly.graph_objects as go\n\n# Daten laden\nCSV_PATH = \"World-Heritage-2025.csv\"\ndf = pd.read_csv(CSV_PATH)\n\n# Spalten bereinigen\ndf[\"date_inscribed\"] = pd.to_numeric(df[\"date_inscribed\"], errors=\"coerce\").astype(\"Int64\")\ndf = df.dropna(subset=[\"name_en\", \"date_inscribed\", \"category\", \"latitude\", \"longitude\"]).reset_index(drop=True)\n\n# Sortieren\ndf = df.sort_values(\"date_inscribed\")\n\n# Alle Jahre sammeln\nyears = sorted(df[\"date_inscribed\"].dropna().unique())\n\n# Kumulative Version des DataFrames erstellen\nframes = []\nfor year in years:\n    subset = df[df[\"date_inscribed\"] &lt;= year].copy()\n    subset[\"year\"] = year\n    frames.append(subset)\n\ndf_cum = pd.concat(frames, ignore_index=True)\ndf_cum[\"year\"] = df_cum[\"year\"].astype(int)\n\n# Farben\npalette = px.colors.qualitative.Plotly\nunique_cats = sorted(df[\"category\"].unique())\ncolor_map = {cat: palette[i % len(palette)] for i, cat in enumerate(unique_cats)}\n\n# Basis-Plot\nfig = px.scatter_geo(\n    df_cum,\n    lat=\"latitude\",\n    lon=\"longitude\",\n    hover_name=\"name_en\",\n    color=\"category\",\n    color_discrete_map=color_map,\n    projection=\"natural earth\",\n    animation_frame=\"year\",\n    title=\"UNESCO-Welterbestätten mit Timeslider (kumuliert)\",\n)\n\n# --- Kumulative Zählung vorbereiten ---\ncounts = df_cum.groupby(\"year\")[\"name_en\"].nunique().to_dict()\n\n# Frames mit Annotation ergänzen\nnew_frames = []\nfor fr in fig.frames:\n    year = int(fr.name)\n    count = counts[year]\n    fr.layout = go.Layout(\n        annotations=[\n            dict(\n                x=0.98, y=0.95, xref=\"paper\", yref=\"paper\",\n                text=f\"Gesamt: {count}\",\n                showarrow=False,\n                font=dict(size=20, color=\"black\"),\n                bgcolor=\"white\",\n                bordercolor=\"black\",\n                borderwidth=1,\n                opacity=0.8\n            )\n        ]\n    )\n    new_frames.append(fr)\nfig.frames = new_frames\n\n# Slider nur mit Jahren\nsteps = []\nfor year in years:\n    step = dict(\n        method=\"animate\",\n        args=[[str(year)],\n              dict(mode=\"immediate\", frame=dict(duration=500, redraw=True), transition=dict(duration=300))],\n        label=str(year)\n    )\n    steps.append(step)\n\nsliders = [dict(\n    active=0,\n    currentvalue={\"prefix\": \"Jahr: \"},\n    pad={\"t\": 50},\n    steps=steps\n)]\n\n# Layout anpassen\nfig.update_layout(\n    width=900,\n    height=500,\n    geo=dict(\n        showland=True,\n        landcolor=\"lightgray\",\n        countrycolor=\"gray\",\n        showframe=False,\n        showcoastlines=True,\n        coastlinecolor=\"gray\",\n        projection=dict(type=\"equal earth\"),\n        center=dict(lat=0, lon=0),\n        lonaxis=dict(showgrid=True, gridwidth=0.5, gridcolor=\"lightgray\"),\n        lataxis=dict(showgrid=True, gridwidth=0.5, gridcolor=\"lightgray\")\n    ),\n    sliders=sliders,\n    annotations=[dict(  # Startwert für erstes Jahr\n        x=0.98, y=0.95, xref=\"paper\", yref=\"paper\",\n        text=f\"Gesamt: {counts[years[0]]}\",\n        showarrow=False,\n        font=dict(size=20, color=\"black\"),\n        bgcolor=\"white\",\n        bordercolor=\"black\",\n        borderwidth=1,\n        opacity=0.8\n    )]\n)\n\nfig"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "AKTLD 2025",
    "section": "",
    "text": "This site is under construction. It will be finished at the time of the AKTLD 2025 conference in Cottbus."
  }
]